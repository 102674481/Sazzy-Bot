#!/usr/bin/env ruby

require 'megahal'
require 'highline/import'
require 'ruby-progressbar'
require 'logger'

bot = Discordrb::Bot.new token: 'NzEyNjEzMTA5MTA1MTY0MzA5.XsUHTg.uKVk_FnWiHXP1kwdRS4hc4VKcCY', client_id: '712613109105164309'
puts "This bot's invite URL is #{bot.invite_url}."



say("<%= color('" + <<-EOS + "', BOLD) %>")
+----------------------------------------------------------+
|                                                          |
|  #    #  ######   ####     ##    #    #    ##    #       |
|  ##  ##  #       #    #   #  #   #    #   #  #   #       |
|  # ## #  #####   #   #  #        ######  #    #  #       |
|  #    #  #       #  ###  ######  #    #  ######  #       |
|  #    #  #       #    #  #    #  #    #  #    #  #       |
|  #    #  ######   ####   #    #  #    #  #    #  ######  |
|                                                          |
|    Type "/help" for options and "/quit" to terminate.    |
+----------------------------------------------------------+
EOS


class MegaLog
  def initialize
    @logger = Logger.new("megahal.log")
    @logger.formatter = proc { |_, _, _, msg| msg + "\n" }
    @logger.info "MegaHALv10\nStart at: [#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}]"
  end
  def exit
    @logger.info "Stop at: [#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}]"
  end
  def error(message)
    @logger.error "(#{message})"
    message = HighLine.color("(#{message})", :dark, :red)
    say(message)
  end
  def status(message)
    @logger.info "(#{message})"
    message = HighLine.color("(#{message})", :dark, :yellow)
    say(message)
  end
  def user(message)
    @logger.info "USER: #{message}"
  end
  def puts(message)
    @logger.info "MH10: #{message}"
    message = HighLine.color(message, :bold, :green)
    say(message)
  end
end

log = MegaLog.new

def list_menu(megahal, log,event)
  #event respond works but the following line does not
  event.user.await(:option)  do  |input_event|
    
    option = input_event.message.content
    
    puts option + " Personality command"

    command = @input 
  case command
    when "*cancel"
    
     log.status('cancelled')
    
    when "*default"
   #Options
     bar = ProgressBar.create(title: "Morphing", total: nil)
    megahal.become(:default, bar)
      bar.finish
      log.status('brain changed to the original loebner prize version')
    
    when "*aliens"
    
      bar = ProgressBar.create(title: "Morphing", total: nil)
      megahal.become(:aliens, bar)
      bar.finish
      log.status('brain changed to bishop from aliens')
    
    when "*ferris"
    
      bar = ProgressBar.create(title: "Morphing", total: nil)
      megahal.become(:ferris, bar)
      bar.finish
      log.status('brain changed to ferris bueller')
    
    when "*pepys"
    
      bar = ProgressBar.create(title: "Morphing", total: nil)
      megahal.become(:pepys, bar)
      bar.finish
      log.status('brain changed to samuel pepys')
    
    when "*pulp"
    
      bar = ProgressBar.create(title: "Morphing", total: nil)
      megahal.become(:pulp, bar)
      bar.finish
      log.status('brain changed to marsellus wallace from pulp fiction')
    
    when "*sherlock"
    
     bar = ProgressBar.create(title: "Morphing", total: nil)
      megahal.become(:sherlock, bar)
      bar.finish
      log.status('brain changed to sherlock holmes')
    
    when "*startrek"
    
     bar = ProgressBar.create(title: "Morphing", total: nil)
      megahal.become(:startrek, bar)
      bar.finish
      log.status('brain changed to data from star trek')
    
    when "*starwars"
    
     bar = ProgressBar.create(title: "Morphing", total: nil)
     megahal.become(:starwars, bar)
    bar.finish
      log.status('brain changed to threepio from star wars')
    else
    event.respond "Personallity not found"
    end
  end
end

def help_menu(megahal, log,event,command)
  
    case command
    when "*cancel" 
      log.status('cancelled')
      return
    when "*reset" 
      megahal.clear
      log.status('brain cleared')
    when "*brain" 
      log.status('show brain menu')
      event.respond "Choose personality to load *keyword\n1.cancel\n2.default\n3.aliens(bishop)\n4.ferris\n5.pepys\n6.pulp\n7.sherlock\n8.startrek(data)\n9.starwars(c3p0)"
      list_menu(megahal, log,event)
    when "*train"
      log.status('train on a text file')
      event.respond "train on a text file\nplease type *filename"
      @file = ""
      event.user.await(:file)  do  |input_event|
        @input = ""
        option = input_event.message.content
        @input = file
        puts @file + " *File Selected"
        @file = @input.gsub(/\*/,'')
       end

      unless File.exists?(@file)
        log.error("no such file")
      else
        begin
          bar = ProgressBar.create(title: "Training", total: nil)
          megahal.train(@file, bar)
          bar.finish
          log.status("training succesfull for '#{@file}'")
          event.respond (log.puts(megahal.reply(nil)))
        rescue => e
          log.error(e.message)
        end
      end
    
    when "*load" 
      log.status('load a brain file')
      filename = ask("Filename: ")
      unless File.exists?(filename)
        log.error("no such file")
      else
        begin
          bar = ProgressBar.create(title: "Loading", total: nil)
          megahal.load(filename, bar)
          bar.finish
          log.status("loading succesfull for '#{filename}'")
          log.puts(megahal.reply(nil))
        rescue => e
          log.error(e.message)
        end
      end
    when "*save"
      log.status('save a brain file')
      filename = ask("Filename: ")
      if File.exists?(filename)
        log.error("file already exists")
      else
        begin
          bar = ProgressBar.create(title: "Saving", total: nil)
          megahal.save(filename, bar)
          bar.finish
          log.status("saving succesfull for '#{filename}'")
        rescue => e
          log.error(e.message)
        end
      end
    
  when "*ignore" 
        megahal.learning = false
        log.status('stop learning from user input')
      
  when "*learn"
        megahal.learning = true
        log.status('start learning from user input')
    
  when "*exit" 
      log.status('exiting')
      exit
    
  else 
    event.respond "Unrecognized option"
  end
end



megahal = MegaHAL.new



greeting = megahal.reply(nil)
log.puts(greeting)
#bot.send_message("712618251514806302",greeting)

#bot.message(contains: /^[\/\\#@](help|menu|info|list|h|\?)$/ ) do |event|
 # event.respond "Message Recieved"
  #event.respond "Respond with a *keyword\n1. cancel\n2. reset\n3. brain\n4. train\n5. load\n6. save\n7. ignore\n8. quit\n?:"
  #@input = " "
  # 
   #event.user.await(:option)  do  |input_event|

    #option = input_event.message.content
    #@input = option
    #puts @input + " Command Selected"
    #help_menu(megahal,log,event,@input)
   #end
  

  #Help command
#end
bot.message(contains: /^[\/\\#@](quit|exit|q|x)$/ ) do |event|
  event.respond "MegaHal is Exiting"
  log.status('exiting')
  log.exit
  exit
  
  
  
  #exit command command
end
#

bot.message(contains: /^[^\/\*]\w+/)  do |event|
    
   puts event.content
    log.user(event.content)
      response = megahal.reply(event.content)
      log.puts(response)
      event.respond response
count
end


bot.run
